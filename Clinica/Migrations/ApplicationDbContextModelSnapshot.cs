// <auto-generated />
using System;
using Clinica.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Clinica.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Clinica.Entidades.ConsultaMedica", b =>
                {
                    b.Property<int>("ConsultaMedicaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultaMedicaID"));

                    b.Property<int?>("DiagnosticoID")
                        .HasColumnType("int");

                    b.Property<string>("EvaluacionMedica")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpedienteID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<int>("SignosVitalesID")
                        .HasColumnType("int");

                    b.Property<string>("TipoConsulta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ConsultaMedicaID");

                    b.HasIndex("ExpedienteID");

                    b.HasIndex("SignosVitalesID");

                    b.ToTable("ConsultasMedicas");
                });

            modelBuilder.Entity("Clinica.Entidades.Detalle", b =>
                {
                    b.Property<int>("DetalleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("TipoExamenID")
                        .HasColumnType("int");

                    b.HasKey("DetalleID");

                    b.HasIndex("TipoExamenID");

                    b.ToTable("Detalles");
                });

            modelBuilder.Entity("Clinica.Entidades.DetalleFactura", b =>
                {
                    b.Property<int>("DetalleFacturaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleFacturaID"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("DetalleID")
                        .HasColumnType("int");

                    b.Property<int>("FacturaID")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DetalleFacturaID");

                    b.HasIndex("DetalleID");

                    b.HasIndex("FacturaID");

                    b.ToTable("DetallesFactura");
                });

            modelBuilder.Entity("Clinica.Entidades.DetalleReceta", b =>
                {
                    b.Property<int>("RecetaID")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("MedicamentoID")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.HasKey("RecetaID", "MedicamentoID");

                    b.HasIndex("MedicamentoID");

                    b.ToTable("DetallesRecetas");
                });

            modelBuilder.Entity("Clinica.Entidades.Diagnostico", b =>
                {
                    b.Property<int>("DiagnosticoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosticoID"));

                    b.Property<int>("ConsultaMedicaID")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiagnosticoID");

                    b.HasIndex("ConsultaMedicaID");

                    b.ToTable("Diagnosticos");
                });

            modelBuilder.Entity("Clinica.Entidades.Expediente", b =>
                {
                    b.Property<int>("ExpedienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpedienteID"));

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<int>("PacienteID")
                        .HasColumnType("int");

                    b.HasKey("ExpedienteID");

                    b.HasIndex("PacienteID")
                        .IsUnique();

                    b.ToTable("Expedientes");
                });

            modelBuilder.Entity("Clinica.Entidades.Factura", b =>
                {
                    b.Property<int>("FacturaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacturaID"));

                    b.Property<DateTime>("FechaFactura")
                        .HasColumnType("datetime");

                    b.Property<int>("PacienteID")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("FacturaID");

                    b.HasIndex("PacienteID");

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Clinica.Entidades.FacturaMedicamento", b =>
                {
                    b.Property<int>("DetalleMedicamentoFacturaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetalleMedicamentoFacturaID"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("FacturaID")
                        .HasColumnType("int");

                    b.Property<int>("MedicamentoID")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("DetalleMedicamentoFacturaID");

                    b.HasIndex("FacturaID");

                    b.HasIndex("MedicamentoID");

                    b.ToTable("FacturasMedicamentos");
                });

            modelBuilder.Entity("Clinica.Entidades.Medicamento", b =>
                {
                    b.Property<int>("MedicamentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicamentoID"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("PrecioBase")
                        .HasColumnType("decimal(10, 2)");

                    b.HasKey("MedicamentoID");

                    b.ToTable("Medicamentos");
                });

            modelBuilder.Entity("Clinica.Entidades.Paciente", b =>
                {
                    b.Property<int>("PacienteID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PacienteID"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Contacto")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ContactoResp")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ExpedienteID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FechaNacimiento")
                        .HasColumnType("date");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NombreResp")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ParentescoResp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Sexo")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PacienteID");

                    b.ToTable("Pacientes");
                });

            modelBuilder.Entity("Clinica.Entidades.Receta", b =>
                {
                    b.Property<int>("RecetaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RecetaID"));

                    b.Property<int>("DiagnosticoID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.HasKey("RecetaID");

                    b.HasIndex("DiagnosticoID");

                    b.ToTable("Recetas");
                });

            modelBuilder.Entity("Clinica.Entidades.SignosVitales", b =>
                {
                    b.Property<int>("SignosVitalesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SignosVitalesID"));

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Presion")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Pulso")
                        .HasColumnType("int");

                    b.Property<decimal?>("Temperatura")
                        .HasColumnType("decimal(5, 2)");

                    b.HasKey("SignosVitalesID");

                    b.ToTable("SignosVitales");
                });

            modelBuilder.Entity("Clinica.Entidades.TipoExamen", b =>
                {
                    b.Property<int>("TipoExamenID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TipoExamenID"));

                    b.Property<string>("NombreExamen")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TipoExamenID");

                    b.ToTable("TiposExamen");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Clinica.Entidades.ConsultaMedica", b =>
                {
                    b.HasOne("Clinica.Entidades.Expediente", "Expediente")
                        .WithMany("ConsultasMedicas")
                        .HasForeignKey("ExpedienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinica.Entidades.SignosVitales", "SignosVitales")
                        .WithMany("ConsultasMedicas")
                        .HasForeignKey("SignosVitalesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expediente");

                    b.Navigation("SignosVitales");
                });

            modelBuilder.Entity("Clinica.Entidades.Detalle", b =>
                {
                    b.HasOne("Clinica.Entidades.TipoExamen", "TipoExamen")
                        .WithMany("Detalles")
                        .HasForeignKey("TipoExamenID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoExamen");
                });

            modelBuilder.Entity("Clinica.Entidades.DetalleFactura", b =>
                {
                    b.HasOne("Clinica.Entidades.Detalle", "Detalle")
                        .WithMany("DetallesFactura")
                        .HasForeignKey("DetalleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinica.Entidades.Factura", "Factura")
                        .WithMany("DetallesFactura")
                        .HasForeignKey("FacturaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Detalle");

                    b.Navigation("Factura");
                });

            modelBuilder.Entity("Clinica.Entidades.DetalleReceta", b =>
                {
                    b.HasOne("Clinica.Entidades.Medicamento", "Medicamento")
                        .WithMany("DetalleRecetas")
                        .HasForeignKey("MedicamentoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinica.Entidades.Receta", "Receta")
                        .WithMany("DetallesReceta")
                        .HasForeignKey("RecetaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Receta");
                });

            modelBuilder.Entity("Clinica.Entidades.Diagnostico", b =>
                {
                    b.HasOne("Clinica.Entidades.ConsultaMedica", "ConsultaMedica")
                        .WithMany("Diagnosticos")
                        .HasForeignKey("ConsultaMedicaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultaMedica");
                });

            modelBuilder.Entity("Clinica.Entidades.Expediente", b =>
                {
                    b.HasOne("Clinica.Entidades.Paciente", "Paciente")
                        .WithOne("Expediente")
                        .HasForeignKey("Clinica.Entidades.Expediente", "PacienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Clinica.Entidades.Factura", b =>
                {
                    b.HasOne("Clinica.Entidades.Paciente", "Paciente")
                        .WithMany("Facturas")
                        .HasForeignKey("PacienteID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Clinica.Entidades.FacturaMedicamento", b =>
                {
                    b.HasOne("Clinica.Entidades.Factura", "Factura")
                        .WithMany("FacturaMedicamentos")
                        .HasForeignKey("FacturaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clinica.Entidades.Medicamento", "Medicamento")
                        .WithMany("FacturaMedicamentos")
                        .HasForeignKey("MedicamentoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Clinica.Entidades.Receta", b =>
                {
                    b.HasOne("Clinica.Entidades.Diagnostico", "Diagnostico")
                        .WithMany("Recetas")
                        .HasForeignKey("DiagnosticoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Clinica.Entidades.ConsultaMedica", b =>
                {
                    b.Navigation("Diagnosticos");
                });

            modelBuilder.Entity("Clinica.Entidades.Detalle", b =>
                {
                    b.Navigation("DetallesFactura");
                });

            modelBuilder.Entity("Clinica.Entidades.Diagnostico", b =>
                {
                    b.Navigation("Recetas");
                });

            modelBuilder.Entity("Clinica.Entidades.Expediente", b =>
                {
                    b.Navigation("ConsultasMedicas");
                });

            modelBuilder.Entity("Clinica.Entidades.Factura", b =>
                {
                    b.Navigation("DetallesFactura");

                    b.Navigation("FacturaMedicamentos");
                });

            modelBuilder.Entity("Clinica.Entidades.Medicamento", b =>
                {
                    b.Navigation("DetalleRecetas");

                    b.Navigation("FacturaMedicamentos");
                });

            modelBuilder.Entity("Clinica.Entidades.Paciente", b =>
                {
                    b.Navigation("Expediente")
                        .IsRequired();

                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Clinica.Entidades.Receta", b =>
                {
                    b.Navigation("DetallesReceta");
                });

            modelBuilder.Entity("Clinica.Entidades.SignosVitales", b =>
                {
                    b.Navigation("ConsultasMedicas");
                });

            modelBuilder.Entity("Clinica.Entidades.TipoExamen", b =>
                {
                    b.Navigation("Detalles");
                });
#pragma warning restore 612, 618
        }
    }
}
